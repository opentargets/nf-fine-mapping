// Required parameters
params {
    outdir              = "outdir"
    version             = false
    validate_params     = true
    monochrome_logs     = true
    publish_dir_mode    = 'copy'
    trace_report_suffix = new Date().format('yyyy-MM-dd_HH-mm-ss')
    input               = null
}


timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${params.trace_report_suffix}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${params.trace_report_suffix}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${params.trace_report_suffix}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${params.trace_report_suffix}.html"
}


// By default use only docker as process executor
docker {
    enabled      = true
    fixOwnership = true
}
process {
    shell         = [
        "bash",
        "-C",
        "-e",
        "-u",
        "-o",
        "pipefail",
    ]
    cpus          = { 1 * task.attempt }
    memory        = { 6.GB * task.attempt }
    time          = { 4.h * task.attempt }

    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'


    // Labels for resource allocation
    withLabel: process_single {
        cpus   = { 1 }
        memory = { 6.GB * task.attempt }
        time   = { 4.h * task.attempt }
    }
    withLabel: process_low {
        cpus   = { 2 * task.attempt }
        memory = { 12.GB * task.attempt }
        time   = { 4.h * task.attempt }
    }
    withLabel: process_medium {
        cpus   = { 6 * task.attempt }
        memory = { 36.GB * task.attempt }
        time   = { 8.h * task.attempt }
    }
    withLabel: process_high {
        cpus   = { 12 * task.attempt }
        memory = { 72.GB * task.attempt }
        time   = { 16.h * task.attempt }
    }
    withLabel: process_long {
        time = { 20.h * task.attempt }
    }
    withLabel: process_high_memory {
        memory = { 200.GB * task.attempt }
    }
    withLabel: error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel: error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }
}
